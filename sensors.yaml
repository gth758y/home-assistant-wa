### Weather/Forecast Info


## OctoPrint
 # - platform: octoprint
   # name: OctoPrint
   # monitored_conditions:
    # - Current State
    # - Temperatures
    # - Job Percentage

 - platform: mqtt
   state_topic: "bruh/sensornode1"
   name: "Living Room Light Level"
   ##This sensor is not calibrated to actual LUX. Rather, this a map of the input voltage ranging from 0 - 1023.
   unit_of_measurement: "LUX"
   value_template: '{{ value_json.ldr }}'
   
 - platform: mqtt
   state_topic: "sensor/kitchen"
   name: "Kitchen Motion"
   value_template: '{{ value_json.motion }}'
   
 - platform: mqtt
   state_topic: "room/laundry/sensor"
   name: "Laundry Room Motion"
   value_template: '{{ value_json.motion }}'

   
## occupancy https://community.home-assistant.io/t/reliable-multi-user-distributed-bluetooth-occupancy-presence-detection/50674
 - platform: mqtt
   state_topic: 'location/master_bedrm/tyler'
   value_template: '{{ value_json.confidence }}'
   unit_of_measurement: '%'
   name: 'Tyler Master Bedroom'

 - platform: mqtt
   state_topic: 'location/kitchen/tyler'
   value_template: '{{ value_json.confidence }}'
   unit_of_measurement: '%'
   name: 'Tyler Kitchen'
   
 - platform: mqtt
   state_topic: 'location/master_bedrm/amy'
   value_template: '{{ value_json.confidence }}'
   unit_of_measurement: '%'
   name: 'Amy Master Bedroom'

 - platform: mqtt
   state_topic: 'location/kitchen/amy'
   value_template: '{{ value_json.confidence }}'
   unit_of_measurement: '%'
   name: 'Amy Kitchen'
   
 - platform: mqtt
   state_topic: 'location/upstairs/tyler'
   value_template: '{{ value_json.confidence }}'
   unit_of_measurement: '%'
   name: 'Tyler Upstairs'
   
 - platform: mqtt
   state_topic: 'location/upstairs/amy'
   value_template: '{{ value_json.confidence }}'
   unit_of_measurement: '%'
   name: 'Amy Upstairs'
   
 - platform: template
   sensors:
     tyler_unifi_presence_confidence:
       unit_of_measurement: "%"
       value_template: >-
          {% if is_state("device_tracker.tyler_pixel9_pro", "home") %}
            100
          {% elif is_state("device_tracker.tyler_pixel9_pro", "unavailable") %}
            50
          {% elif is_state("device_tracker.tyler_pixel9_pro", "away") %}
            0
          {% else %}
            0
          {% endif %}

           
 - platform: template
   sensors:
     amy_unifi_presence_confidence:
       unit_of_measurement: "%"
       value_template: >-
          {% if is_state("device_tracker.amy_gp9", "home") %}
            100
          {% elif is_state("device_tracker.amy_gp9", "unavailable") %}
            50
          {% elif is_state("device_tracker.amy_gp9", "away") %}
            0
          {% else %}
            0
          {% endif %}

   
 - platform: min_max
   name: "Tyler Home Occupancy Confidence"
   type: mean
   round_digits: 0
   entity_ids:
     - sensor.tyler_master_bedroom
     - sensor.tyler_kitchen
     - sensor.tyler_upstairs
     - sensor.tyler_unifi_presence_confidence

 - platform: min_max
   name: "Amy Home Occupancy Confidence"
   type: mean
   round_digits: 0
   entity_ids:
     - sensor.amy_master_bedroom
     - sensor.amy_kitchen
     - sensor.amy_upstairs
     - sensor.amy_unifi_presence_confidence
     
 - platform: time_date
   display_options:
     - 'time'
     - 'date'
     - 'date_time'
     - 'time_date'
     - 'time_utc'
     - 'beat'
     
 # - platform: waze_travel_time
   # name: "Tyler to Work"
   # origin: device_tracker.tyler_pixel4
   # destination: zone.insitu_eagle_point
   # region: 'US'
   # realtime: true
   
 # - platform: waze_travel_time
   # name: "Tyler to Home"
   # origin: device_tracker.tyler_pixel4
   # destination: zone.home
   # region: 'US'
   # realtime: true
   
 # - platform: waze_travel_time
   # name: "Amy to Work"
   # origin: device_tracker.amy_pixel5
   # destination: zone.simplexity
   # region: 'US'
   # realtime: true
   
 # - platform: waze_travel_time
   # name: "Amy to Home"
   # origin: device_tracker.amy_pixel5
   # destination: zone.home
   # region: 'US'
   # realtime: true

 - platform: template
   sensors:
     tyler_status:
       value_template: >-
           {% if is_state("binary_sensor.tyler_home","on") %}
           home
           {% elif is_state("input_select.tyler_status","running") and is_state("person.tyler","LSAC") %}
           swimming
           {% elif not is_state("input_select.tyler_status", "standby") %}
           {{ states("input_select.tyler_status") }}
           {% elif (is_state("person.tyler","Sola") or is_state("person.tyler","Great Clips") or is_state("person.tyler","Elements Massage")) %}
           lux af
           {% else %}
           {{ states("person.tyler") }}
           {%- endif %}
           
 - platform: template
   sensors:
     amy_status:
       value_template: >-
           {% if is_state("binary_sensor.amy_home","on") %}
           home
           {% elif is_state("input_select.amy_status","running") and is_state("person.amy","LSAC") %}
           swimming
           {% elif not is_state("input_select.amy_status", "standby") %}
           {{ states("input_select.amy_status") }}
           {% elif (is_state("person.amy","Sola") or is_state("person.amy","Great Clips") or is_state("person.amy","Elements Massage")) %}
           lux af
           {% else %}
           {{ states("person.amy") }}
           {%- endif %}
           
 - platform: template
   sensors:
     next_sunrise_or_sunset:
       value_template: >-
          {% set now = as_timestamp(now()) %}
          {% set sunrise = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
          {% set sunset = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
          {% if now < sunrise and now < sunset %}
            {% if sunrise < sunset %}
              Next Sunrise at {{ sunrise | timestamp_custom('%H:%M', True) }}
            {% else %}
              Next Sunset at {{ sunset | timestamp_custom('%H:%M', True) }}
            {% endif %}
          {% elif now > sunrise and now < sunset %}
            Next Sunset at {{ sunset | timestamp_custom('%H:%M', True) }}
          {% else %}
            Next Sunrise at {{ sunrise | timestamp_custom('%H:%M', True) }}
          {% endif %}
           
 - platform: mqtt
   state_topic: "/room/master_bedrm/bed/load"
   name: Bed Mass
   unit_of_measurement: "units"
   
 - platform: filter
   name: bed_mass_raw_smoothed
   entity_id: sensor.bed_mass
   filters:
     - filter: time_simple_moving_average
       window_size: 00:00:02
       precision: 1
   
 - platform: template
   sensors:
     bed_mass_calibrated:
       value_template: "{{ (states('sensor.bed_mass_raw_smoothed')|float(0) / -1.845238) | round(0) }}"
       ## changed factor to -1.68668, but reverted back to -1.845238 on 26 Nov 2019
       unit_of_measurement: 'kg'
       
 - platform: template
   sensors:
     dark_sky_pressure_inhg:
       friendly_name: Dark Sky Pressure inHg
       value_template: "{{ (states('sensor.dark_sky_pressure')|float(0) / 33.864) | round(2) }}"
       unit_of_measurement: 'inHg'
       icon_template: >-
         mdi:gauge
         
 - platform: template
   sensors:
     inside_air_temperature:
       value_template: "{{ state_attr('climate.living_room', 'current_temperature') }}"
       #"{{ states.climate.living_room.attributes.current_temperature }}"
       unit_of_measurement: 'Â°F'
      
 # - platform: zwift
   # username: !secret my_zwift_username
   # password: !secret my_zwift_password
   # players:
     # - !secret amy_zwift_id
     
 # - platform: template
   # sensors:
     # octoprint_time_remaining_friendly:
       # friendly_name: Octoprint Time Remaining
       # value_template: >-
         # {% set t = states('sensor.octoprint_time_remaining') | int %}
         # {{ '{:d}d {:02d}h {:02d}m {:02d}s'.format(t // 86400, (t // 3600) % 24, (t % 3600) // 60, (t % 3600) % 60) }}
          
 # - platform: template
   # sensors:
     # octoprint_time_elapsed_friendly:
       # friendly_name: Octoprint Time Elapsed
       # value_template: >-
         # {% set t = states('sensor.octoprint_time_elapsed') | int %}
         # {{ '{:d}d {:02d}h {:02d}m {:02d}s'.format(t // 86400, (t // 3600) % 24, (t % 3600) // 60, (t % 3600) % 60) }}
         
 # - platform: template
   # sensors:
     # octoprint_estimated_completion_time:
       # friendly_name: Octoprint ETC
       # value_template: >-
         # {{ (states('sensor.octoprint_time_remaining') | float + now().timestamp() | int) | timestamp_custom("%R", true) }}
         
 - platform: rest
   name: 'PurpleAir'
   resource: http://10.99.4.80/json?live=true
   value_template: '{{ value_json.SensorId }}'
   json_attributes:
     - Mem
     - memfrag
     - uptime
     - rssi
     - Adc
     - current_temp_f
     - current_humidity
     - current_dewpoint_f
     - pressure
     - p_0_3_um
     - p_0_3_um_b
     - p_0_5_um
     - p_0_5_um_b
     - p_1_0_um
     - p_1_0_um_b
     - pm1_0_atm
     - pm1_0_atm_b
     - p_2_5_um
     - p_2_5_um_b
     - pm2_5_atm
     - pm2_5_atm_b
     - p_5_0_um
     - p_5_0_um_b
     - p_10_0_um
     - p_10_0_um_b
     - pm10_0_atm
     - pm10_0_atm_b
     - pm2.5_aqi
     - pm2.5_aqi_b
 - platform: template
   sensors:
     purpleair_memory:
       friendly_name: "PurpleAir Memory"
       value_template: "{{ state_attr('sensor.purpleair', 'Mem') }}"
       #'{{ states.sensor.purpleair.attributes["Mem"] }}'
     purpleair_adc:
       friendly_name: "PurpleAir ADC"
       value_template: "{{ state_attr('sensor.purpleair', 'Adc') }}"
       #'{{ states.sensor.purpleair.attributes["Adc"] }}'
     purpleair_uptime:
       friendly_name: "PurpleAir Uptime"
       value_template: "{{ state_attr('sensor.purpleair', 'uptime') }}"
       #'{{ states.sensor.purpleair.attributes["uptime"] }}'
       unit_of_measurement: "seconds"
     purpleair_memory_fragmentation:
       friendly_name: "PurpleAir Memory Fragmentation"
       value_template: "{{ state_attr('sensor.purpleair', 'memfrag') }}"
       #'{{ states.sensor.purpleair.attributes["memfrag"] }}'
     purpleair_wifi_rssi:
       friendly_name: "PurpleAir Wifi RSSI"
       value_template: "{{ state_attr('sensor.purpleair', 'rssi') }}"
       #'{{ states.sensor.purpleair.attributes["rssi"] }}'
     purpleair_temp:
       friendly_name: "PurpleAir Temperature"
       value_template: "{{ state_attr('sensor.purpleair', 'current_temp_f') - 8}}"
       #'{{ states.sensor.purpleair.attributes["current_temp_f"] - 8}}'
       unit_of_measurement: "Â°F"
     purpleair_humidity:
       friendly_name: "PurpleAir Humidity"
       value_template: "{{ state_attr('sensor.purpleair', 'current_humidity') * 1.04}}"
       #'{{ states.sensor.purpleair.attributes["current_humidity"] * 1.04}}'
       unit_of_measurement: "%"
     purpleair_dewpoint:
       friendly_name: "PurpleAir Dewpoint"
       value_template: "{{ state_attr('sensor.purpleair', 'current_dewpoint_f') }}"
       #'{{ states.sensor.purpleair.attributes["current_dewpoint_f"] }}'
       unit_of_measurement: "Â°F"
     purpleair_pressure:
       friendly_name: "PurpleAir Pressure"
       value_template: "{{ state_attr('sensor.purpleair', 'pressure') }}"
       #'{{ states.sensor.purpleair.attributes["pressure"] }}'
       unit_of_measurement: "mbar"
     purpleair_aqi_a:
       friendly_name: "PurpleAir AirQuality A"
       value_template: "{{ state_attr('sensor.purpleair', 'pm2.5_aqi') }}"
       #'{{ states.sensor.purpleair.attributes["pm2.5_aqi"] }}'
       unit_of_measurement: "AQI"
     purpleair_aqi_b:
       friendly_name: "PurpleAir AirQuality B"
       value_template: "{{ state_attr('sensor.purpleair', 'pm2.5_aqi_b') }}"
       #'{{ states.sensor.purpleair.attributes["pm2.5_aqi_b"] }}'
       unit_of_measurement: "AQI"
     purpleair_p_0_3_um_a:
       friendly_name: "PurpleAir .3um Partical Count A"
       value_template: "{{ state_attr('sensor.purpleair', 'p_0_3_um') }}"
       #'{{ states.sensor.purpleair.attributes["p_0_3_um"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_0_3_um_b:
       friendly_name: "PurpleAir .3um Partical Count B"
       value_template: "{{ state_attr('sensor.purpleair', 'p_0_3_um_b') }}"
       #'{{ states.sensor.purpleair.attributes["p_0_3_um_b"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_0_5_um_a:
       friendly_name: "PurpleAir .5um Partical Count A"
       value_template: "{{ state_attr('sensor.purpleair', 'p_0_5_um') }}"
       #'{{ states.sensor.purpleair.attributes["p_0_5_um"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_0_5_um_b:
       friendly_name: "PurpleAir .5um Partical Count B"
       value_template: "{{ state_attr('sensor.purpleair', 'p_0_5_um_b') }}"
       #'{{ states.sensor.purpleair.attributes["p_0_5_um_b"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_1_0_um_a:
       friendly_name: "PurpleAir 1.0um Partical Count A"
       value_template: "{{ state_attr('sensor.purpleair', 'p_1_0_um') }}"
       #'{{ states.sensor.purpleair.attributes["p_1_0_um"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_1_0_um_b:
       friendly_name: "PurpleAir 1.0um Partical Count B"
       value_template: "{{ state_attr('sensor.purpleair', 'p_1_0_um_b') }}"
       #'{{ states.sensor.purpleair.attributes["p_1_0_um_b"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_2_5_um_a:
       friendly_name: "PurpleAir 2.5um Partical Count A"
       value_template: "{{ state_attr('sensor.purpleair', 'p_2_5_um') }}"
       #'{{ states.sensor.purpleair.attributes["p_2_5_um"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_2_5_um_b:
       friendly_name: "PurpleAir 2.5um Partical Count B"
       value_template: "{{ state_attr('sensor.purpleair', 'p_2_5_um_b') }}"
       #'{{ states.sensor.purpleair.attributes["p_2_5_um_b"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_5_0_um_a:
       friendly_name: "PurpleAir 5.0um Partical Count A"
       value_template: "{{ state_attr('sensor.purpleair', 'p_5_0_um') }}"
       #'{{ states.sensor.purpleair.attributes["p_5_0_um"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_5_0_um_b:
       friendly_name: "PurpleAir 5.0um Partical Count B"
       value_template: "{{ state_attr('sensor.purpleair', 'p_5_0_um_b') }}"
       #'{{ states.sensor.purpleair.attributes["p_5_0_um_b"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_10_0_um_a:
       friendly_name: "PurpleAir 10.0um Partical Count A"
       value_template: "{{ state_attr('sensor.purpleair', 'p_10_0_um') }}"
       #'{{ states.sensor.purpleair.attributes["p_10_0_um"] }}'
       unit_of_measurement: "um/dl"
     purpleair_p_10_0_um_b:
       friendly_name: "PurpleAir 10.0um Partical Count B"
       value_template: "{{ state_attr('sensor.purpleair', 'p_10_0_um_b') }}"
       #'{{ states.sensor.purpleair.attributes["p_10_0_um_b"] }}'
       unit_of_measurement: "um/dl"
     purpleair_pm10_atm_a:
       friendly_name: "PurpleAir 10.0um Mass A"
       value_template: "{{ state_attr('sensor.purpleair', 'pm10_0_atm') }}"
       #'{{ states.sensor.purpleair.attributes["pm10_0_atm"] }}'
       unit_of_measurement: "ug/m3"
     purpleair_pm10_atm_b:
       friendly_name: "PurpleAir 10.0um Mass B"
       value_template: "{{ state_attr('sensor.purpleair', 'pm10_0_atm_b') }}"
       #'{{ states.sensor.purpleair.attributes["pm10_0_atm_b"] }}'
       unit_of_measurement: "ug/m3"
     purpleair_pm1_atm_a:
       friendly_name: "PurpleAir 1.0um Mass A"
       value_template: "{{ state_attr('sensor.purpleair', 'pm1_0_atm') }}"
       #'{{ states.sensor.purpleair.attributes["pm1_0_atm"] }}'
       unit_of_measurement: "ug/m3"
     purpleair_pm1_atm_b:
       friendly_name: "PurpleAir 1.0um Mass B"
       value_template: "{{ state_attr('sensor.purpleair', 'pm1_0_atm_b') }}"
       #'{{ states.sensor.purpleair.attributes["pm1_0_atm_b"] }}'
       unit_of_measurement: "ug/m3"
     purpleair_pm2_5_atm_a:
       friendly_name: "PurpleAir 2.5um Mass A"
       value_template: "{{ state_attr('sensor.purpleair', 'pm2_5_atm') }}"
       #'{{ states.sensor.purpleair.attributes["pm2_5_atm"] }}'
       unit_of_measurement: "ug/m3"
     purpleair_pm2_5_atm_b:
       friendly_name: "PurpleAir 2.5um Mass B"
       value_template: "{{ state_attr('sensor.purpleair', 'pm2_5_atm_b') }}"
       #'{{ states.sensor.purpleair.attributes["pm2_5_atm_b"] }}'
       unit_of_measurement: "ug/m3"
 - platform: min_max
   name: "PurpleAir AQI"
   type: mean
   round_digits: 0
   entity_ids:
     - sensor.purpleair_aqi_a
     - sensor.purpleair_aqi_b
 - platform: template
   sensors:
     purpleair_description:
       friendly_name: 'PurpleAir AQI Description'
       value_template: >
         {% if (states('sensor.purpleair_aqi')|float(0) ) >= 401.0 %}
           Hazardous
         {% elif (states('sensor.purpleair_aqi')|float(0) ) >= 301.0 %}
           Hazardous
         {% elif (states('sensor.purpleair_aqi')|float(0) ) >= 201.0 %}
           Very Unhealthy
         {% elif (states('sensor.purpleair_aqi')|float(0) ) >= 151.0 %}
           Unhealthy
         {% elif (states('sensor.purpleair_aqi')|float(0) ) >= 101.0 %}
           Unhealthy for Sensitive Groups
         {% elif (states('sensor.purpleair_aqi')|float(0) ) >= 51.0 %}
           Moderate
         {% elif (states('sensor.purpleair_aqi')|float(0) ) >= 0.0 %}
           Good
         {% else %}
           undefined
         {% endif %}
       # entity_id: sensor.purpleair_aqi
 - platform: filter
   name: purpleair_aqi_30min
   entity_id: sensor.purpleair_aqi
   filters:
     - filter: time_simple_moving_average
       window_size: 00:10:00
       precision: 0

 - platform: template
   sensors:
     led_statusbar_tyler:
       value_template: >
         {% if is_state("sensor.tyler_status","home") %}
           g
         {% elif is_state("sensor.tyler_status","Insitu - Waucoma") or is_state("sensor.tyler_status","Insitu - Eagle Point") %}
           b
         {% elif is_state("sensor.tyler_status","swimming") or is_state("sensor.tyler_status","running") %}
           y
         {% elif is_state("sensor.tyler_status","Freddy") or is_state("sensor.tyler_status","Safeway") or is_state("sensor.tyler_status","Costco") %}
           o
         {% elif is_state("sensor.tyler_status","Steph & Lukas") %}
           n
         {% elif is_state("sensor.tyler_status","lux af") %}
           p
         {% elif is_state("sensor.tyler_status","OBGYN or Dentist") %}
           r
         {% else %}
           w
         {%- endif %}

 - platform: template
   sensors:
     led_statusbar_amy:
       value_template: >
         {% if is_state("sensor.amy_status","home") %}
           g
         {% elif is_state("sensor.amy_status","Simplexity") or is_state("sensor.amy_status","Nike") %}
           b
         {% elif is_state("sensor.amy_status","swimming") or is_state("sensor.amy_status","running") %}
           y
         {% elif is_state("sensor.amy_status","Freddy") or is_state("sensor.amy_status","Safeway") or is_state("sensor.amy_status","Costco") %}
           o
         {% elif is_state("sensor.amy_status","Steph & Lukas") %}
           n
         {% elif is_state("sensor.amy_status","lux af") %}
           p
         {% elif is_state("sensor.amy_status","OBGYN or Dentist") %}
           r
         {% else %}
           w
         {%- endif %}

 - platform: template
   sensors:
     led_statusbar_entries:
       value_template: >
         {% if is_state("binary_sensor.garage_open","on") and is_state("binary_sensor.exterior_door_open","on") %}
           p
         {% elif is_state("binary_sensor.garage_open","on") %}
           r
         {% elif is_state("binary_sensor.exterior_door_open","on") %}
           b
         {% else %}
           x
         {%- endif %}

 - platform: template
   sensors:
     led_statusbar_location_disagree:
       value_template: >
         {% if is_state("binary_sensor.location_disagree","on") %}
           r
         {% else %}
           x
         {%- endif %}

 - platform: template
   sensors:
     led_statusbar_bt_monitor_disagree:
       value_template: >
         {% if is_state("binary_sensor.bt_monitor_disagree","on") %}
           r
         {% else %}
           x
         {%- endif %}
         
 - platform: template
   sensors:
     led_statusbar_vehicle_motion:
       value_template: >
         {% if (is_state("binary_sensor.front_door_vehicle","on") or is_state("binary_sensor.driveway_vehicle","on")) %}
           y
         {% else %}
           x
         {%- endif %}
         
 - platform: template
   sensors:
     led_statusbar_human_motion:
       value_template: >
         {% if (is_state("binary_sensor.driveway_person","on") or is_state("binary_sensor.front_door_person","on") or is_state("binary_sensor.back_porch_person","on") or is_state("binary_sensor.shop_door_person","on") or is_state("binary_sensor.back_walkway_person","on")) %}
           y
         {% else %}
           x
         {%- endif %}
         
 - platform: template
   sensors:
     led_statusbar_aqi:
       value_template: >
         {% if (states('sensor.purpleair_aqi_30min')|float(0) ) >= 301.0 %}
           n
         {% elif (states('sensor.purpleair_aqi_30min')|float(0) ) >= 201.0 %}
           p
         {% elif (states('sensor.purpleair_aqi_30min')|float(0) ) >= 151.0 %}
           r
         {% elif (states('sensor.purpleair_aqi_30min')|float(0) ) >= 101.0 %}
           o
         {% elif (states('sensor.purpleair_aqi_30min')|float(0) ) >= 51.0 %}
           y
         {% elif (states('sensor.purpleair_aqi_30min')|float(0) ) >= 0.0 %}
           g
         {% else %}
           x
         {% endif %}
         
 - platform: template
   sensors:
     led_statusbar_pollen:
       value_template: >
         {% if (states('sensor.allergy_index_today')|float(0) ) >= 9.6 %}
           p
         {% elif (states('sensor.allergy_index_today')|float(0) ) >= 7.2 %}
           r
         {% elif (states('sensor.allergy_index_today')|float(0) ) >= 4.8 %}
           o
         {% elif (states('sensor.allergy_index_today')|float(0) ) >= 2.4 %}
           y
         {% elif (states('sensor.allergy_index_today')|float(0) ) >= 0.0 %}
           g
         {% else %}
           x
         {% endif %}
         
 - platform: template
   sensors:
     led_statusbar_open_windows:
       value_template: >
         {% if (is_state("binary_sensor.could_windows_be_open","on") and is_state("binary_sensor.reed_breakfast_window_right","off")) %}
           g
         {% elif (is_state("binary_sensor.could_windows_be_open","off") and is_state("binary_sensor.reed_breakfast_window_right","on")) %}
           r
         {% else %}
           x
         {%- endif %}
         
 - platform: template
   sensors:
     office_statusbar:
       value_template: >
         {% if (is_state("binary_sensor.house_asleep","on") or is_state("binary_sensor.anybody_home","off")) %}
           xxxxxxxxx
         {% else %}
           {{
             states("sensor.led_statusbar_tyler") +
             states("sensor.led_statusbar_amy") +
             states("sensor.led_statusbar_entries") +
             states("sensor.led_statusbar_location_disagree") +
             states("sensor.led_statusbar_bt_monitor_disagree") +
             states("sensor.led_statusbar_vehicle_motion") +
             states("sensor.led_statusbar_human_motion") +
             states("sensor.led_statusbar_aqi") +
             states("sensor.led_statusbar_pollen")
           }}            
         {%- endif %}
         
 - platform: template
   sensors:
     living_room_statusbar:
       value_template: >
         {% if (is_state("binary_sensor.house_asleep","on") or is_state("binary_sensor.anybody_home","off")) %}
           xxxx
         {% else %}
           {{
             states("sensor.led_statusbar_entries") +
             states("sensor.led_statusbar_vehicle_motion") +
             states("sensor.led_statusbar_human_motion") +
             states("sensor.led_statusbar_open_windows")
           }}            
         {%- endif %}
         
 - platform: mqtt
   state_topic: "master_bedroom/bed_occupancy/status"
   name: "Tyler Bed Occupancy Raw"   
   unit_of_measurement: "mV"
   value_template: '{{ value_json.tyler_side }}'
   
 - platform: mqtt
   state_topic: "master_bedroom/bed_occupancy/status"
   name: "Amy Bed Occupancy Raw"   
   unit_of_measurement: "mV"
   value_template: '{{ value_json.amy_side }}'
   
 - platform: filter
   name: "Tyler Bed Occupancy Smoothed"
   entity_id: sensor.tyler_bed_occupancy_raw
   filters:
     - filter: time_simple_moving_average
       window_size: "00:00:05"
       precision: 0

 - platform: filter
   name: "Amy Bed Occupancy Smoothed"
   entity_id: sensor.amy_bed_occupancy_raw
   filters:
     - filter: time_simple_moving_average
       window_size: "00:00:05"
       precision: 0
       
# MQTT Weather Sensors
       
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/barometricPressureRelative/state"
   name: "PWS Altimeter"
   unit_of_measurement: "inHg"
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/humidityIndoor/state"
   name: "PWS Indoor Humidity"
   unit_of_measurement: "%"
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/humidityOutdoor/state"
   name: "PWS Outdoor Humidity"
   unit_of_measurement: "%"
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/rainDaily/state"
   name: "PWS Daily Rain"
   unit_of_measurement: "in"
   icon: mdi:weather-pouring
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/rainEvent/state"
   name: "PWS Event Rain"
   unit_of_measurement: "in"
   icon: mdi:weather-pouring
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/rainHourly/state"
   name: "PWS Hourly Rain"
   unit_of_measurement: "in"
   icon: mdi:weather-pouring
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/rainMonthly/state"
   name: "PWS Monthly Rain"
   unit_of_measurement: "in"
   icon: mdi:weather-pouring
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/rainTotal/state"
   name: "PWS Total Rain"
   unit_of_measurement: "in"
   icon: mdi:weather-pouring
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/rainWeekly/state"
   name: "PWS Weekly Rain"
   unit_of_measurement: "in"
   icon: mdi:weather-pouring
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/solarRadiation/state"
   name: "PWS Solar Radiation"
   unit_of_measurement: "W/m^2"
   icon: mdi:solar-power
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/temperatureIndoor/state"
   name: "PWS Indoor Temperature"
   unit_of_measurement: "F"
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/temperatureOutdoor/state"
   name: "PWS Outdoor Temperature"
   unit_of_measurement: "F"
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/windDirection/state"
   name: "PWS Wind Direction"
   unit_of_measurement: "deg"
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/windGust/state"
   name: "PWS Wind Gust"
   unit_of_measurement: "mph"
   icon: mdi:weather-windy
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/windMaxDailyGust/state"
   name: "PWS Maximum Daily Gust"
   unit_of_measurement: "mph"
   icon: mdi:weather-windy
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/windSpeed/state"
   name: "PWS Wind Speed"
   unit_of_measurement: "mph"
   icon: mdi:weather-windy
   
 - platform: mqtt
   state_topic: "weather/sensor/84f3eb9c94da/uv/state"
   name: "PWS UV Index"
   icon: mdi:weather-sunny
   
 - platform: template
   sensors:
     pws_outdoor_dew_point_calc:
       unit_of_measurement: "Â°F"
       value_template: >
        {% set tf = states('sensor.pws_outdoor_temperature') | float(0) %}
        {% set h = states('sensor.pws_outdoor_humidity') | float(0) %}
        {% set b = 18.678 %}
        {% set c = 257.14 %}
        {% set tc = 5*(tf-32)/9 %}
        {% if h > 0 %}
            {% set g = log(h/100)+((b*tc)/(c+tc)) %}
        {% else %}
            {% set g = 0 %}
        {% endif %}
        {% set dc = c*g/(b-g) %}
        {{ (9/5*dc+32)|round(1) }}
        
 - platform: template
 # https://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml
   sensors:
     pws_outdoor_heat_index_calc:
       unit_of_measurement: "Â°F"
       value_template: >
        {% set tf = states('sensor.pws_outdoor_temperature') | float(0) %}
        {% set h = states('sensor.pws_outdoor_humidity') | float(0) %}
        {% set c1 = -42.379 %}
        {% set c2 = 2.04901523 %}
        {% set c3 = 10.14333127 %}
        {% set c4 = -0.22475541 %}
        {% set c5 = -0.00683783 %}
        {% set c6 = -0.05481717 %}
        {% set c7 = 0.00122874 %}
        {% set c8 = 0.00085282 %}
        {% set c9 = -0.00000199 %}
        {% set HI = (c1+c2*tf+c3*h+c4*tf*h+c5*tf**2+c6*h**2+c7*tf**2*h+c8*tf*h**2+c9*tf**2*h**2) %}
        {% if ((17-(tf-95)|abs)/17) > 0 %}
            {% set adj1 = ((13-h)/4)*sqrt((17-(tf-95)|abs)/17) %}
        {% else %}
            {% set adj1 = 0 %}
        {% endif %}
        {% set adj2 = ((h-85)/10)*((87-tf)/5) %}
        {% set HIsimple = 0.5*(tf+61+((tf-68)*1.2)+(h*0.094)) %}
        {% if HIsimple < 80 %} {{(HIsimple)|round(1) }}
        {% elif tf > 80 and tf < 112 and h < 13 %} {{(HI-adj1)|round(1) }}
        {% elif tf > 80 and tf < 87 and h > 85 %} {{(HI+adj2)|round(1) }}
        {% else %} {{(HI)|round(1)}}
        {%- endif %}
        
 - platform: template
 # https://www.weather.gov/safety/cold-wind-chill-chart
   sensors:
     pws_outdoor_wind_chill_calc:
       unit_of_measurement: "Â°F"
       value_template: >
        {% set tf = states('sensor.pws_outdoor_temperature') | float(0) %}
        {% set w = states('sensor.pws_wind_speed') | float(0) %}
        {% set c1 = 35.74 %}
        {% set c2 = 0.6215 %}
        {% set c3 = 35.75 %}
        {% set c4 = 0.4275 %}
        {% set WC = (c1+c2*tf-35.75*(w**0.16)+c4*(w**0.16)) %}
        {% if tf <= 50 and w > 3 %} {{ (WC) |round(1) }}
        {% else %} {{ (tf)|round(1) }}
        {%- endif %}
        
 # - platform: babybuddy
   # address: https://10.99.1.23
   # port: 8000
   # path: ""
   # api_key: !secret babybuddy_api_key
   
 - platform: template
   sensors:
     time_of_day:
       value_template: >
         {% if is_state("switch.circadian_lighting_circadian_lighting","off") and is_state("binary_sensor.house_asleep_delay","on") %}
           Night
         {% elif is_state("switch.circadian_lighting_circadian_lighting","off") and is_state("binary_sensor.house_asleep_delay","off") %}
           Evening
         {% else %}
           Day
         {%- endif %}
 
 - platform: template
   sensors:
     morgans_room_dew_point:
       unit_of_measurement: "Â°F"
       #state_class: "measurement"
       device_class: "temperature"
       value_template: >
          {% set T = (states('sensor.hum_temp_morgans_room_temperature') | float - 32) * 5 / 9 %}
          {% set RH = states('sensor.hum_temp_morgans_room_humidity') | float %}
          {% set a = 17.27 %}
          {% set b = 237.7 %}
          {% set gamma = (a * T) / (b + T) + log(RH / 100) %}
          {% set dewpoint_c = (b * gamma) / (a - gamma) %}
          {{ (dewpoint_c * 9 / 5) + 32 | round(2) }}